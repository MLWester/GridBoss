services:
  frontend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.frontend
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    env_file:
      - ../.env
    environment:
      VITE_API_URL: ${API_URL}
      VITE_DEV_HOST: 0.0.0.0
      VITE_DEV_PORT: 5173
    ports:
      - "5173:5173"
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      api:
        condition: service_started

  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile.api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    env_file:
      - ../.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    ports:
      - "${API_PORT}:8000"
    volumes:
      - ../api:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    env_file:
      - ../.env
    command: python -m worker.main
    volumes:
      - ../worker:/app/worker
    depends_on:
      redis:
        condition: service_healthy

  bot:
    build:
      context: ..
      dockerfile: infra/Dockerfile.bot
    env_file:
      - ../.env
    command: python -m bot.main
    volumes:
      - ../bot:/app/bot
    depends_on:
      redis:
        condition: service_healthy

  db:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  stripe-cli:
    image: stripe/stripe-cli:latest
    profiles: ["stripe"]
    env_file:
      - ../.env
    entrypoint: ["stripe", "listen", "--forward-to", "${STRIPE_WEBHOOK_FORWARD}"]
    depends_on:
      api:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
